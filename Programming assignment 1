
breed [motherships mothership]
breed [samples sample]
breed [agents trailess-agent]
breed [antAgents antAgent]
breed [customAgents customAgent]
breed [nodes node]
breed [paths path]


;;breed [steel-agents ant-agents]
globals [groupsMade  moverX moverY listX listY]
motherships-own[
  my-neighbors
]


to setup
  clear-all
  set listX []
  set listY [] 
  set groupsMade 0
  
  ;;let hasSample false
  ;;set hasSample false
  set-default-shape paths "dot"
  set-default-shape motherships "airplane"
  
  create-motherships 1
  [
    set size 3
  ]
  
  set-default-shape agents "default"
  create-agents numOfAgents [
    set color green
  ]
  
  ;set-default-shape patches "triangle"
  
  
  ask n-of numOfObs (patches with [pcolor = black])
  [
    set pcolor blue
  ]
  ask patches[create-groups]
  ;;antMove
  reset-ticks
end

to create-groups
  if number-of-groups > groupsMade[ask patches in-radius random (group-size)
    [ set pcolor red]
  set groupsMade groupsMade + 1
  ]
end




to customMove
  
  
  ask agents with [color = green][
    
  ifelse [pcolor] of patch-ahead 1 = blue
      [lt random 90
        rt random 90
      ]
    [
      rt random 90
      lt random 90
      fd 1
    ]
  ifelse [pcolor] of patch-ahead 1 = red
     [   
        ask patch-ahead 1[set pcolor black]
        set color yellow
     ] 
      [rt random 90
      lt random 90
      fd 1]
    
    
  ]
  
  ask agents with [color = yellow][
    face mothership 0
    fd 1
    ask motherships[set my-neighbors (other agents) in-radius 1]
    ask other motherships in-radius (size / 2)
    [
      ask my-neighbors[
      
        set color  green
      ]
    ]
   
    
    
    
  ]
  ;;ask agents with [color = green][
    ;;fd 1
  ;;]
tick
end


to antMove
  
  let movingHome false
  
  ask agents with [color = green][
    
  ifelse [pcolor] of patch-ahead 1 = blue
      [lt random 90
        rt random 90
      ]
    [
      rt random 90
      lt random 90
      fd 1
    ]
  ifelse [pcolor] of patch-ahead 1 = red
     [   
        ask patch-ahead 1[set pcolor black]
        set color yellow
     ] 
      [rt random 90
      lt random 90
      fd 1]
    
    
  ]
  
  ask agents with [color = yellow][
    
    face mothership 0
    fd 1
    set movingHome true
    set listX fput xcor listX
    set listY fput ycor listY
    
    ask motherships[set my-neighbors (other agents) in-radius 1]
    ask other motherships in-radius (size / 2)
    [
      ask my-neighbors[
        
        set color  green
      ]
    ]
   
    
    
    
  ]
 
 (foreach listX listY
[ [a b] -> create-paths length listX[
      setxy a b
      set color white
      
  ]  ])
  set listX []
  set listY [] 
  
tick
end

